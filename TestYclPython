# -*- coding: utf-8 -*-
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import NoAlertPresentException
import unittest, time, re


class UntitledTestCase(unittest.TestCase):
    def setUp(self):
        self.driver = webdriver.Firefox()
        self.driver.implicitly_wait(30)
        self.base_url = "https://yclients.com/signin"
        self.verificationErrors = []
        self.accept_next_alert = True

    def test_untitled_test_case(self):
        driver = self.driver
        driver.get(self.base_url)

        driver.find_element_by_xpath(
            "(.//*[normalize-space(text()) and normalize-space(.)='Homepage'])[1]/following::div[2]").click()
        time.sleep(2)
        driver.find_element_by_name("email").click()
        time.sleep(2)
        driver.find_element_by_name("email").clear()
        time.sleep(2)
        driver.find_element_by_name("email").send_keys("dmitry.abramkin@diatomic.software")
        time.sleep(2)
        driver.find_element_by_name("password").click()
        time.sleep(2)
        driver.find_element_by_name("password").clear()
        time.sleep(2)
        driver.find_element_by_name("password").send_keys("fx3x3r")
        time.sleep(2)
        driver.find_element_by_link_text("Login").click()
        time.sleep(4)
        driver.find_element_by_link_text("Sign in").click()
        time.sleep(2)
        driver.find_element_by_xpath(
            "(.//*[normalize-space(text()) and normalize-space(.)='Remote help'])[1]/following::span[1]").click()
        time.sleep(2)
        driver.close()

    def is_element_present(self, how, what):
        try:
            self.driver.find_element(by=how, value=what)
        except NoSuchElementException as e:
            return False
        return True

    def is_alert_present(self):
        try:
            self.driver.switch_to_alert()
        except NoAlertPresentException as e:
            return False
        return True

    def close_alert_and_get_its_text(self):
        try:
            alert = self.driver.switch_to_alert()
            alert_text = alert.text
            if self.accept_next_alert:
                alert.accept()
            else:
                alert.dismiss()
            return alert_text
        finally:
            self.accept_next_alert = True

    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)


if __name__ == "__main__":
    unittest.main()
