import org.apache.commons.io.FileUtils;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.List;
import java.io.*;
import java.net.MalformedURLException;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import org.w3c.dom.*;
import java.util.concurrent.TimeUnit;
import javax.xml.xpath.XPathConstants;




public class Xml_InfoWorkZL {

    public static final String driver = "org.postgresql.Driver";
    public static final String url = "jdbc:postgresql://10.139.13.1:5432/vir";
    public static final String username = "rsfdw";
    public static final String password = "rsfdw";
    public static Object Time;
    public static Object Timer;
    // public static Object date;

    public static void main(String[] args) {
        long start = System.currentTimeMillis();
        //String Time;
        String pattern = "MM-dd-yyyy HH:mm:ss";
        DateFormat df = new SimpleDateFormat(pattern);
        Date today = Calendar.getInstance().getTime();
        String Time_check = df.format(today);

        try {
            Class.forName(driver);
            Connection conn = DriverManager.getConnection(url, username, password);

            Statement stmt = conn.createStatement();
            ResultSet executeQuery = stmt.executeQuery("select * from d_asv_individual_account daia where snils ='11608660343' and individual_account_gid ='616603319' limit 10;");

            FileWriter fileWriter = new FileWriter("f:/1/InfoWorkZL/" + "sql_query.sql");
            PrintWriter printWriter = new PrintWriter(fileWriter);
            printWriter.print("SQL Query for PstgreSQL VIR 10.139.13.1 " + "\n");
            printWriter.printf("select * from d_asv_individual_account daia where snils ='11608660343' and individual_account_gid ='616603319' limit 10;" + "\n");
            printWriter.printf("Current Time check  " + " " + Time_check + "\n");
            printWriter.printf("Just relax and go with the flow! " + "\n");
            printWriter.flush();
            printWriter.close();

            while (executeQuery.next()) {


                File file = new File("f:/1/InfoWorkZL/" + "get_snils.csv");
                Boolean includeHeaders = true;
                ResultSet myResultSet = executeQuery;
                FileWriter wr = new FileWriter(file, true);
                wr.write(String.valueOf(myResultSet.getString("snils") + " \n"));
                wr.flush();
                wr.close();
                //new File("2").mkdir();
                //new File("c:/1" + "2").mkdir()
                System.out.println(executeQuery.getString("snils"));
                File file_1 = new File("f:/1/InfoWorkZL/" + "get_snils.csv");
                List<String> lines = Files.readAllLines(file_1.toPath(),
                        StandardCharsets.UTF_8);

                for (String line : lines) {
                    // String[] array = line.split(",", -1);
                    String array = line.replaceAll("[\\s|\\u00A0]+", "");
                    String array1 = array;
                    URL InfoWorkZL_1 = new URL("http://10.138.243.194:8080/report/query?query=InfoWorkZL&snils=" + array1 + "&lastname=-581498941&firstname=-1894049236&patronymic=1797973543&period_from=10.2016&period_to=02.2017");
                    FileUtils.copyURLToFile(InfoWorkZL_1, new File("f:/1/InfoWorkZL/" + line + "-этот снилс мы подставили в запрос.xml"));

                }


            }

            File file_2 = new File("f:/1/InfoWorkZL/" + "get_snils.csv");

            List<String> lines = Files.readAllLines(file_2.toPath(),
                    StandardCharsets.UTF_8);

            for (String line : lines) {
                TimeUnit.SECONDS.sleep(1);
                int q=1;
                String snils1 = line;
                String period1 = "10.2016";

                FileInputStream file_xml = new FileInputStream(new File("f:/1/InfoWorkZL/" + line + "-этот снилс мы подставили в запрос.xml"));
                DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder builder = builderFactory.newDocumentBuilder();
                Document xmlDocument = builder.parse(file_xml);
                xmlDocument.getDocumentElement().normalize();
                NodeList nList=xmlDocument.getElementsByTagName("vir:SNILS");
                XPath xPath = XPathFactory.newInstance().newXPath();
                System.out.println("*************************");

                System.out.println("*************************");

                String expression = "/InfoWorkZL/SNILS";
                System.out.println(expression);
                String snils_1 = xPath.compile(expression).evaluate(xmlDocument);
                System.out.println(snils_1);

                if (snils_1.equals(snils1)) {

                    System.out.println("СтраховойНомер -muy bien");


                } else {
                    System.out.println(expression.toString() + "\n" + " ---------------------- " + "\n" + "original" + "\n" + snils1);

                }


                System.out.println("*************************");
              
                String expression2 = "/InfoWorkZL/Period_from";

                System.out.println(expression2);
                String period_1 = xPath.compile(expression2).evaluate(xmlDocument);
                System.out.println(period_1);


                if (period_1.equals(period1)) {

                    System.out.println("Период -muy bien");

                } else {
                    System.out.println(expression2.toString() + "\n" + " ---------------------- " + "\n" + "original" + "\n" + period1);

                }

                System.out.println("*************************");
                String expression3 = "/InfoWorkZL/InfoWork/Insurant/Insurant_Address";
                // String expression3 = "/InfoWorkZL/[@type='Insurant_Address']";
                System.out.println(expression3);
                NodeList nodeList = (NodeList) xPath.compile(expression3).evaluate(xmlDocument, XPathConstants.NODESET);
                for (int i = 0; i < nodeList.getLength(); i++) {
                    System.out.println(nodeList.item(i).getFirstChild().getNodeValue() + " номер = "+ q++);

                }
                    {

                            // System.out.println(conn.getMetaData().getDatabaseProductName());
                        }

                        System.out.println("Test proceed = " + " " + (System.currentTimeMillis() - start) + " " + " ms");

                    }
                } catch(XPathExpressionException | ParserConfigurationException e){
                    e.printStackTrace();
                } catch(FileNotFoundException e){
                    e.printStackTrace();
                } catch(SAXException e){
                    e.printStackTrace();
                } catch(ClassNotFoundException e){
                    e.printStackTrace();
                } catch(MalformedURLException e){
                    e.printStackTrace();
                } catch(SQLException e){
                    e.printStackTrace();
                } catch(IOException e){
                    e.printStackTrace();
                } catch(InterruptedException e){
                    e.printStackTrace();
                }

            }
        }

